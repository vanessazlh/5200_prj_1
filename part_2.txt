-- Drop tables in reverse order of dependency to ensure a clean slate
DROP TABLE IF EXISTS Reviews;
DROP TABLE IF EXISTS Expert_In;
DROP TABLE IF EXISTS Writes;
DROP TABLE IF EXISTS Paper;
DROP TABLE IF EXISTS Author;
DROP TABLE IF EXISTS Research_Area;

-- ####################################################################
-- 1. CORRECTED CREATE TABLE Statements
-- ####################################################################

CREATE TABLE "Author" (
	"email"	TEXT PRIMARY KEY,
	"name"	TEXT NOT NULL
);

CREATE TABLE "Research_Area" (
	"area_name"	TEXT PRIMARY KEY
);

-- MODIFICATION:
--   - Added `DEFAULT 'undecided'` for the acceptance column. This is more efficient
--     than using a trigger for a simple default value.
--   - Set the default for avg_score to NULL explicitly for clarity.
CREATE TABLE "Paper" (
	"pid"	INTEGER PRIMARY KEY,
	"title"	TEXT NOT NULL,
	"acceptance"	TEXT DEFAULT 'undecided',
	"area_name"	TEXT,
	"avg_score" REAL DEFAULT NULL, -- Use REAL for averages, not INTEGER
	FOREIGN KEY("area_name") REFERENCES "Research_Area"("area_name") ON DELETE CASCADE
);

CREATE TABLE "Writes" (
	"email"	TEXT NOT NULL,
	"pid"	INTEGER NOT NULL,
	PRIMARY KEY("email","pid"),
    FOREIGN KEY("email") REFERENCES "Author"("email") ON DELETE CASCADE,
	FOREIGN KEY("pid") REFERENCES "Paper"("pid") ON DELETE CASCADE
);

CREATE TABLE Expert_In (
    "email" TEXT,
    "area_name" TEXT,
    PRIMARY KEY (email, area_name),
    FOREIGN KEY (email) REFERENCES Author(email) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (area_name) REFERENCES Research_Area(area_name) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Reviews (
    "email" TEXT,
    "pid" INTEGER,
    "originality" INTEGER NOT NULL CHECK (originality BETWEEN 0 AND 5),
    "correctness" INTEGER NOT NULL CHECK (correctness BETWEEN 0 AND 5),
    "fitness" INTEGER NOT NULL CHECK (fitness BETWEEN 0 AND 5),
    PRIMARY KEY (email, pid),
    FOREIGN KEY (email) REFERENCES Author(email) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (pid) REFERENCES Paper(pid) ON DELETE CASCADE ON UPDATE CASCADE
);

-- ####################################################################
-- 2. TRIGGERS (These are well-written and can remain)
-- ####################################################################

CREATE TRIGGER prevent_self_review
BEFORE INSERT ON Reviews
FOR EACH ROW
WHEN EXISTS (
    SELECT 1 FROM Writes
    WHERE email = NEW.email AND pid = NEW.pid
)
BEGIN
    SELECT RAISE(ABORT, 'Authors cannot review their own papers');
END;

-- This set of triggers updates the average score whenever a review is changed
CREATE TRIGGER update_avg_on_review_insert
AFTER INSERT ON Reviews
FOR EACH ROW
BEGIN
    UPDATE Paper
    SET avg_score = (
        SELECT AVG((originality + correctness + fitness) / 3.0)
        FROM Reviews
        WHERE pid = NEW.pid
    )
    WHERE pid = NEW.pid;
END;

CREATE TRIGGER update_avg_on_review_delete
AFTER DELETE ON Reviews
FOR EACH ROW
BEGIN
    UPDATE Paper
    SET avg_score = (
        SELECT AVG((originality + correctness + fitness) / 3.0)
        FROM Reviews
        WHERE pid = OLD.pid
    )
    WHERE pid = OLD.pid;
END;


-- This set of triggers updates the acceptance status whenever a review is changed
CREATE TRIGGER update_acceptance_on_review_insert
AFTER INSERT ON Reviews
FOR EACH ROW
BEGIN
    UPDATE Paper
    SET acceptance = CASE
        WHEN (SELECT COUNT(*) FROM Reviews WHERE pid = NEW.pid) >= 2 THEN
            CASE
                WHEN (SELECT AVG((originality + correctness + fitness) / 3.0) FROM Reviews WHERE pid = NEW.pid) >= 3.5
                THEN 'accepted'
                ELSE 'rejected'
            END
        ELSE 'undecided'
    END
    WHERE pid = NEW.pid;
END;

CREATE TRIGGER update_acceptance_on_review_delete
AFTER DELETE ON Reviews
FOR EACH ROW
BEGIN
    UPDATE Paper
    SET acceptance = CASE
        WHEN (SELECT COUNT(*) FROM Reviews WHERE pid = OLD.pid) >= 2 THEN
            CASE
                WHEN (SELECT AVG((originality + correctness + fitness) / 3.0) FROM Reviews WHERE pid = OLD.pid) >= 3.5
                THEN 'accepted'
                ELSE 'rejected'
            END
        ELSE 'undecided'
    END
    WHERE pid = OLD.pid;
END;


-- ####################################################################
-- 3. INSERT STATEMENTS (With corrected data)
-- ####################################################################

INSERT INTO Author (email, name) VALUES
('john.smith@university.edu', 'John Smith'),
('jane.white@university.edu', 'Jane White'),
('jane.white2@university.edu', 'Jane White'),
('leo.martinez@institute.edu', 'Leo Martinez'),
('maria.rodriguez@university.edu', 'Maria Rodriguez');

INSERT INTO Research_Area (area_name) VALUES
('Artificial Intelligence'),
('Database Systems'),
('Computer Networks'),
('Computer Security'),
('Machine Learning'),
('Software Engineering');

INSERT INTO Paper(pid, title, area_name) VALUES
(1, 'Efficient Routing Protocols', 'Computer Networks'),
(2, 'Automated Testing Frameworks for Microservices', 'Software Engineering'),
(3, 'Graph Databases for Social Network Analysis', 'Database Systems'),
(4, 'Transformer Models for Computer Vision', 'Artificial Intelligence'),
(5, 'Quantum Algorithms for Cryptographic Applications', 'Computer Security'),
(6, 'Real-Time Data Streaming in Edge Computing Environments', 'Database Systems'),
(7, 'Adaptive User Interfaces for Accessibility Enhancement', 'Artificial Intelligence');

INSERT INTO Writes (email, pid) VALUES
('john.smith@university.edu', 1),  -- John wrote paper 1
('jane.white@university.edu', 2),
('leo.martinez@institute.edu', 3),
('maria.rodriguez@university.edu', 4),
('jane.white2@university.edu', 5),
('john.smith@university.edu', 6),
('jane.white@university.edu', 7);

INSERT INTO Expert_In(email, area_name) VALUES
('john.smith@university.edu', 'Software Engineering'),
('jane.white@university.edu', 'Artificial Intelligence'),
('jane.white@university.edu', 'Machine Learning'),
('jane.white2@university.edu', 'Machine Learning'),
('leo.martinez@institute.edu', 'Software Engineering'),
('maria.rodriguez@university.edu', 'Computer Security');

-- MODIFICATION:
-- Changed the reviewers for paper 1 to avoid the self-review error.
-- John Smith wrote paper 1, so he cannot review it.
-- Let's have Leo and Maria review it instead.
INSERT INTO Reviews (email, pid, originality, correctness, fitness) VALUES
-- Paper 1 Reviews
('leo.martinez@institute.edu', 1, 4, 5, 4),   -- Avg: 4.33
('maria.rodriguez@university.edu', 1, 4, 4, 5), -- Avg: 4.33
                                                -- Overall avg for paper 1: 4.33 -> accepted
-- Paper 2 Reviews
('john.smith@university.edu', 2, 5, 5, 5),   -- Only one review, status should be 'undecided'

-- Paper 3 Reviews
('jane.white@university.edu', 3, 2, 1, 2),    -- Avg: 1.67
('john.smith@university.edu', 3, 1, 2, 3);    -- Avg: 2.0
                                                -- Overall avg for paper 3: 1.83 -> rejected
